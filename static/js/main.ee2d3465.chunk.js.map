{"version":3,"sources":["serviceWorker.js","components/navigation/navigation.jsx","components/player/player.jsx","components/play-arrow/play-arrow.jsx","components/song/song.jsx","components/playlist/playlist.jsx","main.jsx","api/api.js","player-handler/player-handler.js","store/store.js","index.js"],"names":["Boolean","window","location","hostname","match","Navigation","inject","observer","props","onChangeHandler","evt","store","setTerm","target","value","search","setState","isSearchVisible","resetCurrentSong","console","log","onKeyUpHandler","event","keyCode","term","searchButtonHandler","state","this","searchClass","cn","search__input","status","className","type","onChange","onKeyUp","disabled","onClick","React","PureComponent","Music","Player","cancelMusicChange","step","song","songInstance","playing","seek","progressRef","current","style","width","duration","requestAnimationFrame","changeProgressBar","playButtonHandler","play","setSongPlayingStatus","pauseButtonHandler","pause","musicChangeHandler","index","currentSongIndex","playList","length","stop","setCurrentSongIndex","setCurrentSong","isPlaying","muteButtonHandler","isMuted","mute","resetButtonHandler","seekHandler","per","_playButtonRef","createRef","songId","trackMusicAvailability","reaction","currentSong","curSong","setMusicInstance","isChoosen","on","promoSong","title","artist","name","clientX","innerWidth","ref","PlayArrow","chooseSong","playButtonClass","Song","alt","src","album","cover_small","height","artistNameHandler","innerText","Playlist","isEmpty","LinearProgress","variant","map","i","key","id","MainPage","coverStyle","backgroundImage","cover_medium","PlayerHandler","setPlayer","Howl","songSrc","action","bound","newIndex","curByIndex","curById","find","preview","error","setStore","response","runInAction","data","DZ","api","observable","computed","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ee2d3465.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {inject, observer} from 'mobx-react';\r\nimport cn from 'classnames';\r\n\r\n@inject('store')\r\n@observer\r\n export class Navigation extends React.PureComponent {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tisSearchVisible: false,\r\n\t\t}\r\n\t}\r\n\r\n\tonChangeHandler = (evt) => {\r\n\t\tthis.props.store.setTerm(evt.target.value);\r\n\t}\r\n\r\n\tsearch = () => {\r\n\t\tthis.setState({isSearchVisible: false})\r\n\t\tthis.props.store.resetCurrentSong();\r\n\t\tconsole.log('Searching');\r\n\t\tthis.props.store.search();\r\n\t}\r\n\r\n\tonKeyUpHandler = (event) => {\r\n\t\tconsole.log(this.props);\r\n\t\tif (event.keyCode !== 13 || !this.props.store.term) {\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t\tthis.search();\r\n\t};\r\n\r\n\tsearchButtonHandler = () => {\r\n\t\tconst {isSearchVisible} = this.state;\r\n\t\tif (!this.props.store.term) {\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t\tif(isSearchVisible) {\r\n\t\t\tthis.search();\r\n\t\t} else {\r\n\t\t\tthis.setState({isSearchVisible: true});\r\n\t\t}\r\n\t}\r\n\r\n  \trender() {\r\n    \tconst {store} = this.props;\r\n\t\t\tconst {term} = store;\r\n\r\n\t\tconst searchClass = cn({\r\n\t\t\tsearch__input: true,\r\n\t\t\t\"search__input--hide\": !this.state.isSearchVisible && store.status === 'compleated',\r\n\t\t})\r\n\r\n      return (\r\n         <nav>\r\n         <div className=\"left\">\r\n         </div>\r\n         <div className=\"right\">\r\n           <input\r\n\t\t\t\t\t\t className={searchClass}\r\n\t\t\t\t\t\t type='text'\r\n\t\t\t\t\t\t value={term}\r\n\t\t\t\t\t\t onChange={this.onChangeHandler}\r\n\t\t\t\t\t\t onKeyUp={this.onKeyUpHandler}\r\n\t\t\t\t\t\t disabled={store.status === 'pending'}\r\n\t\t\t\t\t\t/>\r\n           <i\r\n\t\t\t\t\t \t className=\"material-icons search\"\r\n\t\t\t\t\t\t onClick={() => this.searchButtonHandler()}\r\n\t\t\t\t\t\t>search</i>\r\n         </div>\r\n       </nav>\r\n      )\r\n   }\r\n }","import React from 'react';\r\nimport {inject, observer} from 'mobx-react';\r\nimport { reaction } from 'mobx';\r\n\r\nconst Music = {\r\n  NEXT: 'next',\r\n  PREV: 'prev',\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nexport class  Player extends React.PureComponent {\r\n  cancelMusicChange = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this._playButtonRef = React.createRef();\r\n    this.state = {\r\n      isPlaying: false,\r\n      isMuted: true,\r\n    }\r\n    this.songId = null;\r\n    this.trackMusicAvailability();\r\n    this.progressRef = React.createRef();\r\n  }\r\n\r\n  trackMusicAvailability() {\r\n    this.cancelMusicChange = reaction(() => {\r\n      return this.props.store.currentSong\r\n    },\r\n      (curSong) => {\r\n        const {store} = this.props;\r\n        this.progressRef.current.style.width = `0%`;\r\n\r\n        store.setMusicInstance();\r\n        if(store.isChoosen) {\r\n          this.playButtonHandler();\r\n        }\r\n\r\n        store.songInstance.on('play', () => {\r\n          requestAnimationFrame(this.step);\r\n          this.setState(() => ({\r\n            isPlaying: true,\r\n          }))\r\n        })\r\n\r\n        store.songInstance.on('pause', () => {\r\n          this.setState(() => ({\r\n            isPlaying: false,\r\n          }))\r\n        })\r\n\r\n        store.songInstance.on('end', () => {\r\n          console.log('end of song listener');\r\n          this.musicChangeHandler(Music.NEXT);\r\n        })\r\n      }\r\n    );\r\n    reaction(() => {\r\n      return this.props.store.playList;\r\n    },\r\n    () => {\r\n      if(this.props.store.songInstance) {\r\n        this.props.store.songInstance.stop();\r\n      }\r\n      this.setState(() => ({\r\n        isPlaying: false,\r\n      }));\r\n    }\r\n    )\r\n  }\r\n\r\n  step = () => {\r\n    const song = this.props.store.songInstance;\r\n\r\n    if (song && song.playing()) {\r\n      let seek = song.seek();\r\n      this.progressRef.current.style.width = (((seek / song.duration()) * 100) || 0) + '%';\r\n      requestAnimationFrame(this.step);\r\n    }\r\n  }\r\n\r\n  changeProgressBar = () => {\r\n    this.props.store.songInstance\r\n  }\r\n\r\n  playButtonHandler = () => {\r\n    this.props.store.songInstance.play();\r\n    this.props.store.setSongPlayingStatus(true);\r\n  }\r\n\r\n  pauseButtonHandler = () => {\r\n    this.props.store.songInstance.pause();\r\n    this.props.store.setSongPlayingStatus(false);\r\n\r\n  }\r\n\r\n  musicChangeHandler = (term) => {\r\n    const {store} = this.props;\r\n    let index = store.currentSongIndex;\r\n    switch(term) {\r\n      case Music.NEXT:\r\n        index = store.currentSongIndex + 1;\r\n        break;\r\n      case Music.PREV:\r\n        index = store.currentSongIndex - 1;\r\n        break;\r\n      default: index;\r\n    }\r\n\r\n    if(index < 0 || index >= store.playList.length) {\r\n      return;\r\n    }\r\n    store.songInstance.stop();\r\n\r\n    store.setCurrentSongIndex(index);\r\n    store.setCurrentSong(index, null);\r\n    store.songInstance.play();\r\n    store.setSongPlayingStatus(true);\r\n    this.setState({isPlaying: true});\r\n  }\r\n\r\n  muteButtonHandler = () => {\r\n    this.setState((state) => ({\r\n      isMuted: !state.isMuted,\r\n    }))\r\n    this.props.store.songInstance.mute(this.state.isMuted);\r\n  }\r\n\r\n  resetButtonHandler = () => {\r\n    if(this.props.store.songInstance.playing()) {\r\n      this.props.store.songInstance.seek(0);\r\n    }\r\n  }\r\n\r\n  seekHandler = (per) => {\r\n    const song = this.props.store.songInstance;\r\n    if(song.playing()) {\r\n      song.seek(song.duration() * per);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {isPlaying, isMuted} = this.state;\r\n    const promoSong = this.props.store.currentSong;\r\n    const {currentSongIndex = 0, playList = []} = this.props.store;\r\n\r\n    return (\r\n      <div className=\"player-ui\">\r\n        <div className=\"title\">\r\n        <h3 className=\"promo-title\">{promoSong ? promoSong.title : ``}</h3>\r\n        </div>\r\n        <div className=\"small\">\r\n          <i className=\"material-icons\"\r\n            onClick={() => this.resetButtonHandler()}\r\n          >replay</i>\r\n          <p>{promoSong ? promoSong.artist.name : ``}</p>\r\n          <i\r\n            className=\"material-icons\"\r\n            onClick={() => this.muteButtonHandler()}\r\n            >volume_{isMuted ? `up` : `off`}</i>\r\n        </div>\r\n        <div className=\"progress\" onClick={(evt) => this.seekHandler(evt.clientX / window.innerWidth)}>\r\n          <div className=\"played\"\r\n            ref={this.progressRef}\r\n            onClick={(evt) => console.log(evt)}\r\n          >\r\n          </div>\r\n        </div>\r\n        <div className=\"controls\">\r\n          <i\r\n            className=\"material-icons\"\r\n            onClick={() => this.musicChangeHandler(Music.PREV)}\r\n            >skip_previous</i>\r\n          {isPlaying\r\n            ? <i className=\"material-icons\"\r\n              onClick={this.pauseButtonHandler}\r\n            >pause</i>\r\n            : <i className=\"material-icons\"\r\n            ref={this._playButtonRef}\r\n            onClick={this.playButtonHandler}\r\n            >play_arrow</i>\r\n          }\r\n          <i\r\n            className={currentSongIndex !== playList.length - 1 ? 'material-icons' : 'material-icons material-icons__disable'}\r\n            onClick={() => this.musicChangeHandler(Music.NEXT)}\r\n          >\r\n            skip_next</i>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.cancelMusicChange();\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {inject, observer} from 'mobx-react';\r\nimport cn from 'classnames';\r\n\r\n@inject('store')\r\n@observer\r\nexport class PlayArrow extends React.PureComponent {\r\n  constructor() {\r\n    super();\r\n    this.state = {isPlaying: false};\r\n  }\r\n\r\n  playButtonHandler = () => {\r\n      const {store, index} = this.props;\r\n      store.chooseSong(index);\r\n\r\n    if(store.songInstance.playing() && store.currentSongIndex === index) {\r\n      store.songInstance.pause();\r\n      store.setSongPlayingStatus(false);\r\n    } else {\r\n      store.songInstance.play();\r\n      store.setSongPlayingStatus(true);\r\n    }\r\n  }\r\n\r\n    render() {\r\n      const {store, index} = this.props;\r\n\r\n\t\t\tconst playButtonClass = cn({\r\n\t\t\t\t'material-icons': true,\r\n\t\t\t\t'play-button': true,\r\n\t\t\t\t'red600': store.currentSongIndex === index,\r\n\t\t\t})\r\n\r\n        return (\r\n\t\t\t\t\t<div className=\"state\">\r\n\t\t\t\t\t\t<i className={playButtonClass}\r\n\t\t\t\t\t\t\tonClick={() => this.playButtonHandler()}\r\n            >{\r\n              store.currentSongIndex === index && store.isPlaying\r\n                ? `pause`\r\n                : `play_arrow`}\r\n            </i>\r\n\t\t\t\t\t</div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {PlayArrow} from '../play-arrow/play-arrow';\r\nimport {inject, observer} from 'mobx-react';\r\n\r\n@inject('store')\r\n@observer\r\nexport class Song extends React.PureComponent {\r\n  artistNameHandler(term) {\r\n    this.props.store.resetCurrentSong();\r\n    this.props.store.search(term);\r\n  }\r\n\r\n  render () {\r\n    const {song, index, store} = this.props;\r\n    const {title, artist} = song;\r\n    return (\r\n      <div className=\"song\">\r\n        <div className=\"info\">\r\n          <img\r\n            className=\"img second\"\r\n            alt={title}\r\n            src={song.album.cover_small}\r\n            width=\"60\"\r\n            height=\"60\"\r\n          />\r\n          <div className=\"titles\">\r\n          <h5>{title ? title : 'no title'}</h5>\r\n          <p className=\"artist-name\" onClick={(evt) => this.artistNameHandler(evt.target.innerText)}>{artist.name ? artist.name : 'no name'}</p>\r\n          </div>\r\n        </div>\r\n        <PlayArrow index={index} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport {Song} from '../song/song';\nimport {inject, observer} from 'mobx-react';\nimport { LinearProgress } from '@material-ui/core';\n\n@inject('store')\n@observer\n export class Playlist extends React.PureComponent {\n   render() {\n    const {isEmpty, playList, status} = this.props.store;\n    console.log(isEmpty, playList, status);\n    return (\n       <div className='music'>\n         {isEmpty && status === 'pending' ?\n           <LinearProgress variant={'query'} /> : null\n         }\n        {isEmpty && status === 'compleated' ?\n          <p className=\"result\">No results found</p> : null\n        }\n         {playList.map((song, i) => {\n            if (i > 0) {\n              return <Song key={song.id} index={i} song={song} />\n            }\n              return null;\n            })\n          }\n       {/* <audio crossOrigin=\"anonymous\" src='https://cors-anywhere.herokuapp.com/https://cdns-preview-3.dzcdn.net/stream/c-30ac211e4edea6b6ac3149bcbd5cdb5b-2.mp3'  controls>Audio is not supported</audio> */}\n     </div>\n    )\n   }\n }\n","import React from 'react';\nimport './App.css';\nimport {Navigation} from './components/navigation/navigation';\nimport {Player} from './components/player/player';\nimport {Playlist} from './components/playlist/playlist';\nimport {inject, observer} from 'mobx-react';\n\n@inject('store')\n@observer\nexport class MainPage extends React.PureComponent {\n  render() {\n    const coverStyle = {\n      backgroundImage: this.props.store.currentSong ? `url(${this.props.store.currentSong.album.cover_medium})` : ``,\n    };\n\n    return (\n      <div className=\"player\">\n        <div className=\"cover\" style={coverStyle}></div>\n        <Navigation />\n        <Player />\n        <div className=\"btn\">\n        </div>\n        <Playlist />\n      </div>\n    )\n  }\n}\n","import 'whatwg-fetch';\n\nconst CORS = `https://cors-anywhere.herokuapp.com/`;\nconst API_ENDPOINT = `${CORS}https://api.deezer.com/`;\n\nexport const searchMusic = async (term, type = 'search?q=') => {\n  DZ.api(`${type}${term}&&index=0&limit=10`, function(response){\n    console.log(\"Nam\", response.data);\n    return response\n  });\n\n}\n\nconst getJSONResponse = async (url) => {\n    const result = await DZ.api(url, {\n        headers: { 'X-Requested-With': 'XMLHttpRequest' },\n    });\n\n    const data = result.json();\n    return data;\n}\n\nexport const getPlayList = async (url) => {\n    const trackList = await DZ.api(`${url}`, {\n        headers: { 'X-Requested-With': 'XMLHttpRequest' },\n    });\n    console.log(trackList.json());\n\n    return trackList;\n}\n\n","import {Howl} from 'howler';\r\n\r\nexport class PlayerHandler {\r\n    constructor(index, src) {\r\n\t\t\t\tthis.index = index;\r\n\t\t\t\tthis.songSrc = src;\r\n\t\t\t\tthis.songInstance = null;\r\n    }\r\n\r\n    setPlayer = () => {\r\n        const song = new Howl({\r\n\t\t\t\t\tsrc: [this.songSrc],\r\n\t\t\t\t});\r\n\t\t\t\tthis.songInstance = song;\r\n      return song;\r\n\t\t}\r\n\r\n\t\tstep = () => {\r\n\t\t\tlet seek = this.songInstance.seek() || 0;\r\n\t\t\tconsole.log(seek);\r\n\t\t}\r\n}\r\n","import { observable, action, runInAction, computed } from \"mobx\";\nimport { searchMusic } from \"../api/api\";\nimport { Howl } from \"howler\";\nimport { PlayerHandler } from \"../player-handler/player-handler\";\n\nclass MusicSearchStore {\n  @observable term = \"Год змеи\";\n  @observable artist;\n  @observable playList = [];\n  @observable status = \"\";\n  @observable currentSong = null;\n  @observable currentSongIndex = 0;\n  @observable songInstance; // TODO: do not foget to set 'null' after currentSongIndex change\n  @observable isChoosen = false;\n  @observable isPlaying = false;\n\n  @computed\n  get isEmpty() {\n    return this.playList.length === 0;\n  }\n\n  @action.bound\n  setSongPlayingStatus(status) {\n    this.isPlaying = status;\n  }\n\n  @action.bound\n  setCurrentSongIndex(newIndex) {\n    this.currentSongIndex = newIndex;\n  }\n\n  @action.bound\n  setCurrentSong(index, id) {\n    if (index >= 0) {\n      const curByIndex = this.playList[index];\n      return (this.currentSong = curByIndex);\n    }\n    const curById = this.playList.find((song) => song.id === id);\n    return (this.currentSong = curById);\n  }\n\n  @action.bound\n  chooseSong(index) {\n    if (this.currentSongIndex === index) {\n      return;\n    }\n    this.songInstance.stop();\n    this.setCurrentSongIndex(index);\n    this.setCurrentSong(index);\n    this.isChoosen = true;\n  }\n\n  @action.bound\n  setMusicInstance() {\n    const song = new PlayerHandler(\n      this.currentSongIndex,\n      this.currentSong.preview\n    );\n    return (this.songInstance = song.setPlayer());\n  }\n\n  @action.bound\n  resetCurrentSong() {\n    try {\n      this.songInstance.stop();\n      this.songInstance = null;\n      this.currentSongIndex = 0;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  constructor() {\n    this.search();\n  }\n\n  @action.bound\n  setTerm(value) {\n    if (value === this.term) {\n      return;\n    }\n    this.term = value;\n  }\n\n  @action.bound\n  async search(term = this.term) {\n    if (!term) {\n      return;\n    }\n    try {\n      this.status = \"pending\";\n      const setStore = (response) => {\n        runInAction(() => {\n          this.playList = response.data;\n          this.status = \"compleated\";\n          this.currentSong = response.data[0];\n        });\n      };\n      DZ.api(`search?q=${term}&&index=0&limit=10`, function (response) {\n        console.log(\"Nam\", response);\n        setStore(response);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n\nexport const store = new MusicSearchStore();\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {MainPage} from './main';\r\nimport {Provider} from 'mobx-react';\r\nimport {store} from './store/store';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <MainPage />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n     );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}